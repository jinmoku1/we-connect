var assert = require('assert')
  , userDb = require('../db/user_db');

describe("#userDb.create()", function() {
	var registeredUser = null;
	
	var newUser = {
		netId		: 'newuser1',
		firstName	: 'Jessica',
		lastName	: 'Alba',
		department	: 'CS',
		userType	: 0, // Student
		interests	: [],
		extension	: {
			classStanding	: 0,	// Freshman
			degree			: 0		// Undergraduate
		}
	};
	
	var password = 'welovedarko';
	
	before(function(done) {
		userDb.create(newUser, password, function(userDetailDoc) {
			registeredUser = userDetailDoc;
			done();
		});
	});
   
	it("should register a new user and new user", function() {
		assert(registeredUser != null);
	});
	
	it("should have an autogenerated _id", function() {
		assert(registeredUser['_id'] != null);
	});
	
	it("should have set the net id", function() {
		assert(registeredUser['netId'] == 'newuser1');
	});
	
	it("should have the same first name", function() {
		assert(registeredUser['firstName'] == 'Jessica');
	});
	
	it("should have the same last name", function() {
		assert(registeredUser['lastName'] == 'Alba');
	});
	
	it("should have the same department", function() {
		assert(registeredUser['department'] == 'CS');
	});
	
	it("should have the right class standing as an extension", function() {
		assert(registeredUser['extension']['classStanding'] == 0);
	});
	
	it("should have the right degree as an extension", function() {
		assert(registeredUser['extension']['degree'] == 0);
	});
});

describe("#userDb.netIdExists()", function() {
	var validNetIdExists = false;
	var nonvalidNetIdExists = true;
	
	var validNetId = 'newuser1';
	var nonvalidNetId = '238hodfnklf2fwf';
	
	before(function(done) {
		userDb.netIdExists(validNetId, function(exists) {
			validNetIdExists = exists;
			userDb.netIdExists(nonvalidNetId, function(exists) {
				nonvalidNetIdExists = exists;
				done();
			});
		});
	});
   
	it("can check if a a given net id exists in the database (valid)", function() {
		assert(validNetIdExists == true);
	});
	
	it("can check if a a given net id exists in the database (non-valid)", function() {
		assert(nonvalidNetIdExists == false);
	});
});

describe("#userDb.isValidLogin()", function() {
	var validUserDetail = null;
	var nonvalidUserDetail = {};
	
	var netId = 'newuser1';
	var validPassword = 'welovedarko';
	var nonvalidPassword = 'wehatedarko';
	
	before(function(done) {
		userDb.isValidLogin(netId, validPassword, function(userDetailDoc) {
			validUserDetail = userDetailDoc;
			userDb.isValidLogin(netId, nonvalidPassword, function(userDetailDoc) {
				nonvalidUserDetail = userDetailDoc;
				done();
			});
		});
	});
	
	it("should retrive null in calse of nonvalid password", function() {
		assert(nonvalidUserDetail == null);
	});
   
	it("should retrive a valid user detail", function() {
		assert(validUserDetail != null);
	});
	
	it("should retrive the _id", function() {
		assert(validUserDetail['_id'] != null);
	});
	
	it("should retrieve the valid net id", function() {
		assert(validUserDetail['netId'] == 'newuser1');
	});
	
	it("should retrieve the valid first name", function() {
		assert(validUserDetail['firstName'] == 'Jessica');
	});
	
	it("should retrieve the valid last name", function() {
		assert(validUserDetail['lastName'] == 'Alba');
	});
	
	it("should retrieve the valid department", function() {
		assert(validUserDetail['department'] == 'CS');
	});
	
	it("should retrieve the valid class standing as an extension", function() {
		assert(validUserDetail['extension']['classStanding'] == 0);
	});
	
	it("should retrieve the valid degree as an extension", function() {
		assert(validUserDetail['extension']['degree'] == 0);
	});
});

describe("#userDb.remove()", function() {
	var userRemoved = false;
	
	var netId = 'newuser1';
	var password = 'welovedarko';
	
	before(function(done) {
		userDb.isValidLogin(netId, password, function(detailDoc) {
			userDb.remove(detailDoc['_id'], function(removed) {
				userRemoved = removed;
				done();
			});
		});
	});
	
	it("should remove the user with detail _id", function() {
		assert(userRemoved == true);
	});
});